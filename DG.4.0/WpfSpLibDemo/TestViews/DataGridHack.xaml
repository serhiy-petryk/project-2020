<Window x:Class="WpfSpLibDemo.TestViews.DataGridHack"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WpfSpLibDemo.TestViews"
        xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic"
        mc:Ignorable="d"
        x:Name="Root"
        Title="DataGridHack" Height="700" Width="1000">

    <Window.Resources>
        <!-- Original themes/aero.normalcolor.baml
    <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes"
                    xmlns:ui="clr-namespace:System.Windows.Documents;assembly=PresentationUI">
-->

        <BooleanToVisibilityConverter x:Key="å"/>

        <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type DataGrid}, ResourceId=DataGridSelectAllButtonStyle}"
         TargetType="{x:Type Button}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Grid>
                            <Rectangle x:Name="Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels="true"/>
                            <Polygon x:Name="Arrow" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="8,8,3,3" 
                                     Opacity="0.15" Fill="Black" Stretch="Uniform" Points="0,10 10,10 10,0"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="UIElement.IsMouseOver" Value="true">
                                <Setter TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" Property="Shape.Stroke"/>
                            </Trigger>
                            <Trigger Property="ButtonBase.IsPressed" Value="true">
                                <Setter TargetName="Border" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}" Property="Shape.Fill"/>
                            </Trigger>
                            <Trigger Property="UIElement.IsEnabled" Value="false">
                                <Setter TargetName="Arrow" Property="UIElement.Visibility" Value="Collapsed"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style TargetType="{x:Type DataGrid}">
            <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
            <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Control.BorderBrush" Value="#FF688CAF"/>
            <Setter Property="Control.BorderThickness" Value="1"/>
            <Setter Property="DataGrid.RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGrid}">
                        <Border Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"
                                Padding="{TemplateBinding Control.Padding}">
                            <ScrollViewer Name="DG_ScrollViewer" Focusable="false">
                                <Control.Template>
                                    <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="Auto"/>
                                                <RowDefinition Height="*"/>
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                            </Grid.ColumnDefinitions>
                                            <Button Command="{x:Static DataGrid.SelectAllCommand}" Focusable="false"
                                                    Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=CellsPanelHorizontalOffset}"
                                                    Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type DataGrid}, ResourceId=DataGridSelectAllButtonStyle}}"
                                                    Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.All}}"/>
                                            <DataGridColumnHeadersPresenter Name="PART_ColumnHeadersPresenter" Grid.Column="1"
                                                                            Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Column}}"/>
                                            <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="1" Grid.ColumnSpan="2"
                                                                    CanContentScroll="{TemplateBinding ScrollViewer.CanContentScroll}"/>
                                            <ScrollBar Name="PART_VerticalScrollBar" Grid.Row="1" Grid.Column="2" Orientation="Vertical"
                                                       Maximum="{TemplateBinding ScrollViewer.ScrollableHeight}"
                                                       ViewportSize="{TemplateBinding ScrollViewer.ViewportHeight}"
                                                       Visibility="{TemplateBinding ScrollViewer.ComputedVerticalScrollBarVisibility}"
                                                       Value="{Binding Path=VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
                                            <Grid Row="2" Column="1">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=NonFrozenColumnsViewportHorizontalOffset}"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>
                                                <ScrollBar Name="PART_HorizontalScrollBar" Grid.Column="1" Orientation="Horizontal"
                                                           Maximum="{TemplateBinding ScrollViewer.ScrollableWidth}"
                                                           ViewportSize="{TemplateBinding ScrollViewer.ViewportWidth}"
                                                           Visibility="{TemplateBinding ScrollViewer.ComputedHorizontalScrollBarVisibility}"
                                                           Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"/>
                                            </Grid>
                                        </Grid>
                                    </ControlTemplate>
                                </Control.Template>
                                <ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="ItemsControl.IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>
        
        <Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                        <Grid>
                            <DataGridColumnHeader Name="PART_FillerColumnHeader" IsHitTestVisible="false"/>
                            <ItemsPresenter/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="æ" TargetType="{x:Type Thumb}">
            <Setter Property="FrameworkElement.Width" Value="8"/>
            <Setter Property="Control.Background" Value="Transparent"/>
            <Setter Property="FrameworkElement.Cursor" Value="SizeWE"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Control.Background}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="ç" TargetType="{x:Type Thumb}">
            <Setter Property="FrameworkElement.Height" Value="8"/>
            <Setter Property="Control.Background" Value="Transparent"/>
            <Setter Property="FrameworkElement.Cursor" Value="SizeNS"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Thumb}">
                        <Border Padding="{TemplateBinding Control.Padding}" Background="{TemplateBinding Control.Background}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="{x:Static DataGridColumnHeader.ColumnFloatingHeaderStyleKey}" TargetType="{x:Type Control}">
            <Setter Property="UIElement.Opacity" Value="0.6"/>
            <Setter Property="Control.BorderBrush" Value="#FF688CAF"/>
            <Setter Property="Control.BorderThickness" Value="1"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Control}">
                        <Border BorderThickness="{TemplateBinding Control.BorderThickness}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}" Padding="{TemplateBinding Control.Padding}"
                                Background="{TemplateBinding Control.Background}">
                            <Grid>
                                <Canvas Name="PART_VisualBrushCanvas" Margin="{TemplateBinding FrameworkElement.Margin}"/>
                            </Grid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="{x:Static DataGridColumnHeader.ColumnHeaderDropSeparatorStyleKey}" TargetType="{x:Type Separator}">
            <Setter Property="Control.Background" Value="#FF000080"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Separator}">
                        <Border Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style TargetType="{x:Type DataGridRow}">
            <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
            <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
            <Setter Property="DataGridRow.ValidationErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <TextBlock Margin="2,0,0,0" VerticalAlignment="Center" Foreground="Red" Text="!"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridRow}">
                        <Border x:Name="DGR_Border" Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                            <SelectiveScrollingGrid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding DataGridRow.ItemsPanel}"
                                                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                <DataGridDetailsPresenter Grid.Column="1" Grid.Row="1" Visibility="{TemplateBinding DataGridRow.DetailsVisibility}"
                                                          SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=AreRowDetailsFrozen, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}}"/>
                                <DataGridRowHeader SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical" Grid.RowSpan="2"
                                                   Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Row}}"/>
                            </SelectiveScrollingGrid>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="DataGridRow.IsNewItem" Value="true">
                    <Setter Property="FrameworkElement.Margin"
                            Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=NewItemMargin}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style TargetType="{x:Type DataGridCellsPresenter}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCellsPresenter}">
                        <ItemsPresenter/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <SolidColorBrush x:Key="{x:Static DataGrid.FocusBorderBrushKey}" Color="#FF000000"/>

        <!-- Original         <Style TargetType="{x:Type DataGridCell}">
            <Setter Property="Control.Background" Value="Transparent"/>
            <Setter Property="Control.BorderBrush" Value="Transparent"/>
            <Setter Property="Control.BorderThickness" Value="1"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Border Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}" SnapsToDevicePixels="true">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="DataGridCell.IsSelected" Value="true">
                    <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    <Setter Property="Control.Foreground"
                            Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                    <Setter Property="Control.BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
                    <Setter Property="Control.BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="DataGridCell.IsSelected" Value="true"/>
                        <Condition Property="Selector.IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Control.Background"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    <Setter Property="Control.BorderBrush"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    <Setter Property="Control.Foreground"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                </MultiTrigger>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>-->

        <Style TargetType="{x:Type DataGridCell}">
            <Setter Property="Control.Background" Value="Transparent"/>
            <Setter Property="Control.BorderBrush" Value="Transparent"/>
            <Setter Property="Control.BorderThickness" Value="0"/>
            <Setter Property="VerticalAlignment" Value="Stretch"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridCell}">
                        <Border Background="{TemplateBinding Control.Background}"
                                BorderBrush="{TemplateBinding Control.BorderBrush}"
                                BorderThickness="{TemplateBinding Control.BorderThickness}"
                                VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                SnapsToDevicePixels="true">
                            <ContentPresenter
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="DataGridCell.IsSelected" Value="true">
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="Control.Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                    <Setter Property="Control.Foreground"
                            Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                    <Setter Property="Control.BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                </Trigger>
                <Trigger Property="UIElement.IsKeyboardFocusWithin" Value="true">
                    <Setter Property="Control.BorderBrush" Value="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="DataGridCell.IsSelected" Value="true"/>
                        <Condition Property="Selector.IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Control.Background"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    <Setter Property="Control.BorderBrush"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                    <Setter Property="Control.Foreground"
                            Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}}"/>
                </MultiTrigger>
                <Trigger Property="IsEditing" Value="True">
                    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                </Trigger>
                <Trigger Property="UIElement.IsEnabled" Value="false">
                    <Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        
        <Style x:Key="{x:Static DataGridComboBoxColumn.TextBlockComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ComboBox}">
                        <ContentPresenter Margin="1,1,1,1" Content="{TemplateBinding ComboBox.SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding ComboBox.SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemsControl.ItemTemplateSelector}"
                                          ContentStringFormat="{TemplateBinding ComboBox.SelectionBoxItemStringFormat}"
                                          VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                          HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" IsHitTestVisible="false"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style TargetType="{x:Type DataGridColumnHeader}">
            <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                        <Grid>
                            <themes:DataGridHeaderBorder SortDirection="{TemplateBinding DataGridColumnHeader.SortDirection}"
                                                         IsHovered="{TemplateBinding UIElement.IsMouseOver}"
                                                         IsPressed="{TemplateBinding ButtonBase.IsPressed}"
                                                         IsClickable="{TemplateBinding DataGridColumnHeader.CanUserSort}"
                                                         Background="{TemplateBinding Control.Background}"
                                                         BorderBrush="{TemplateBinding Control.BorderBrush}"
                                                         BorderThickness="{TemplateBinding Control.BorderThickness}"
                                                         Padding="{TemplateBinding Control.Padding}"
                                                         SeparatorVisibility="{TemplateBinding DataGridColumnHeader.SeparatorVisibility}"
                                                         SeparatorBrush="{TemplateBinding DataGridColumnHeader.SeparatorBrush}">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                  RecognizesAccessKey="true"/>
                            </themes:DataGridHeaderBorder>
                            <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource æ}"/>
                            <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource æ}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style TargetType="{x:Type DataGridRowHeader}">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                        <Grid>
                            <themes:DataGridHeaderBorder IsSelected="{TemplateBinding DataGridRowHeader.IsRowSelected}"
                                                         IsHovered="{TemplateBinding UIElement.IsMouseOver}"
                                                         IsPressed="{TemplateBinding ButtonBase.IsPressed}"
                                                         Background="{TemplateBinding Control.Background}"
                                                         BorderBrush="{TemplateBinding Control.BorderBrush}"
                                                         BorderThickness="{TemplateBinding Control.BorderThickness}"
                                                         Padding="{TemplateBinding Control.Padding}" Orientation="Horizontal"
                                                         SeparatorVisibility="{TemplateBinding DataGridRowHeader.SeparatorVisibility}"
                                                         SeparatorBrush="{TemplateBinding DataGridRowHeader.SeparatorBrush}">
                                <StackPanel Orientation="Horizontal">
                                    <ContentPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                                                      RecognizesAccessKey="true"/>
                                    <Control SnapsToDevicePixels="false"
                                             Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=(Validation.HasError), Converter={StaticResource å}}"
                                             Template="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Path=ValidationErrorTemplate}"/>
                                </StackPanel>
                            </themes:DataGridHeaderBorder>
                            <Thumb x:Name="PART_TopHeaderGripper" VerticalAlignment="Top" Style="{StaticResource ç}"/>
                            <Thumb x:Name="PART_BottomHeaderGripper" VerticalAlignment="Bottom" Style="{StaticResource ç}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0" Background="White">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="Auto"/>
            </Grid.RowDefinitions>

            <Slider Grid.Row="0"
                    x:Name="uiScaleSlider"
                    Focusable="False"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Top"
                    ToolTip="Determines the UI scale factor. Double-click to revert scaling back to 100%."
                    Height="100"
                    Value="1" Minimum="0.5" Maximum="4"
                    Orientation="Vertical"
                    Ticks="1"
                    IsSnapToTickEnabled="False"
                    TickPlacement="BottomRight"
                    AutoToolTipPlacement="BottomRight"
                    AutoToolTipPrecision="2"/>

            <TextBlock Grid.Row="1" Text="HSL:" Margin="0 5 0 0"/>
            <Grid Grid.Row="2">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Slider Grid.Column="0"
                        x:Name="H"
                        HorizontalAlignment="Center" VerticalAlignment="Top"
                        Height="100"
                        Minimum="0" Maximum="360"
                        Orientation="Vertical"
                        Ticks="1" IsSnapToTickEnabled="False" TickPlacement="BottomRight"
                        AutoToolTipPlacement="BottomRight" AutoToolTipPrecision="2"
                        Value="{Binding ElementName=Root, Path=BaseHsl.Hue, Mode=TwoWay}"/>

                <Slider Grid.Column="1"
                        x:Name="S"
                        HorizontalAlignment="Center" VerticalAlignment="Top"
                        Height="100" 
                        Minimum="0" Maximum="100"
                        Orientation="Vertical"
                        Ticks="1" IsSnapToTickEnabled="False" TickPlacement="BottomRight"
                        AutoToolTipPlacement="BottomRight" AutoToolTipPrecision="2"
                        Value="{Binding ElementName=Root, Path=BaseHsl.Saturation, Mode=TwoWay}"/>

                <Slider Grid.Column="2"
                        x:Name="L"
                        HorizontalAlignment="Center" VerticalAlignment="Top"
                        Height="100" 
                        Minimum="0" Maximum="100"
                        Orientation="Vertical"
                        Ticks="1" IsSnapToTickEnabled="False" TickPlacement="BottomRight"
                        AutoToolTipPlacement="BottomRight" AutoToolTipPrecision="2"
                        Value="{Binding ElementName=Root, Path=BaseHsl.Lightness, Mode=TwoWay}"/>
            </Grid>
            <Grid Row="4">
                <Button Content="Change hue" Click="ChangeHsl_OnClick"/>
            </Grid>
        </Grid>

        <Grid Grid.Column="1" Margin="0 10 0 0">
            <Grid.LayoutTransform>
                <ScaleTransform CenterX="0" CenterY="0" ScaleX="{Binding ElementName=uiScaleSlider,Path=Value}" ScaleY="{Binding ElementName=uiScaleSlider,Path=Value}"/>
            </Grid.LayoutTransform>
            <ScrollViewer HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                <StackPanel Orientation="Vertical">
                    <WrapPanel>
                        <TextBlock Text="Try to vertical align (center) text content in data grid cell and fill it to whole cell:"/>
                    </WrapPanel>

                    <WrapPanel>
                        <DataGrid Name="TestDataGrid1" Margin="5"
                                  RowHeaderWidth="24"
                                  RowHeight="30"
                                  SnapsToDevicePixels="True"
                                  ItemsSource="{Binding Data}"
                                  Background="Yellow"
                                  Foreground="Blue"
                                  BorderBrush="Red"
                                  BorderThickness="2"
                                  BeginningEdit="TestDataGrid1_OnBeginningEdit"/>
                    </WrapPanel>

                    <WrapPanel>
                        <DataGrid Name="TestDataGrid2" Margin="5"
                                  RowHeaderWidth="24"
                                  RowHeight="30"
                                  SnapsToDevicePixels="True"
                                  ItemsSource="{Binding Data}"
                                  Background="#FFB0C4DE"
                                  Foreground="#FF406000"
                                  BorderBrush="Blue"
                                  BorderThickness="2"
                                  BeginningEdit="TestDataGrid1_OnBeginningEdit"/>
                    </WrapPanel>

                </StackPanel>
            </ScrollViewer>
        </Grid>
    </Grid>
</Window>
