<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:common="clr-namespace:WpfSpLib.Common"
                    xmlns:effects="clr-namespace:WpfSpLib.Effects"
                    xmlns:helpers="clr-namespace:WpfSpLib.Helpers">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/WpfSpLib;component/Themes/Common.xaml" />
        <ResourceDictionary Source="pack://application:,,,/WpfSpLib;component/Styles/ButtonStyles.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <!-- ==================================================== -->
    <!-- ==== Style list is taken from SimpleStyles.xaml ==== -->
    <!-- https://github.com/pragmatrix/CrossUI/blob/master/CrossUI.Runner.WPF/Simple%20Styles%20Default.xaml -->
    <!-- ==================================================== -->

    <!-- <Style x:Key="SimpleButtonFocusVisual"> -->
    <!-- <Style x:Key="SimpleButton" TargetType="{x:Type Button}" BasedOn="{x:Null}"> -->
    <!-- <Style x:Key="RadioButtonFocusVisual"> -->
    <!-- <Style x:Key="CheckBoxFocusVisual"> -->
    <!-- <Style x:Key="SimpleCheckBox" TargetType="{x:Type CheckBox}"> -->

    <Style x:Key="MonochromeCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <!--        <Setter Property="FocusVisualStyle" Value="{DynamicResource CheckBoxFocusVisual}"/>-->
        <Setter Property="Padding" Value="4 0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
<!--        <Setter Property="effects:ChromeEffect.Monochrome" Value="#FFF5FAFF" />-->
        <Setter Property="effects:ChromeEffect.Monochrome" Value="{Binding RelativeSource={RelativeSource AncestorType=helpers:IColorThemeSupport}, Path=ActualThemeColor}" />
        <Setter Property="effects:ChromeEffect.ChromeMatrix" Value="+0%,+67%,+67%,50, +0%,+67%,+67%,100, +10%,+85%,+85%,100, +20%,+85%,+85%,100" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent"
                                     HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Border x:Name="Border" Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}" />
                                <Viewbox Width="9" Height="9">
                                    <Path x:Name="CheckMark" Width="16" Height="16" Margin="1.5" Opacity="0"
                                          Fill="{TemplateBinding Foreground}" Stretch="Fill" SnapsToDevicePixels="False" 
                                          Data="M10.97 4.97a.75.75 0 0 1 1.07 1.05l-3.99 4.99a.75.75 0 0 1-1.08.02L4.324 8.384a.75.75 0 1 1 1.06-1.06l2.094 2.093 3.473-4.425a.267.267 0 0 1 .02-.022z" />
                                </Viewbox>
                                <Border x:Name="IndeterminateMark" Background="{TemplateBinding Foreground}" Margin="3"
                                        Opacity="0" CornerRadius="1" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter Property="Opacity" TargetName="CheckMark" Value="1" />
                            <Setter Property="Opacity" TargetName="IndeterminateMark" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="CheckMark" Value="1" />
                            <Setter Property="Opacity" TargetName="IndeterminateMark" Value="0.6" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Simple Radio Button -->
    <Style x:Key="MonochromeRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="Padding" Value="4 0" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="effects:ChromeEffect.Monochrome" Value="#FFF5FAFF" />
        <Setter Property="effects:ChromeEffect.ChromeMatrix" Value="+0%,+67%,+67%,50, +0%,+67%,+67%,100, +10%,+85%,+85%,100, +20%,+85%,+85%,100" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">

                    <!-- BulletDecorator is used to provide baseline alignment between the checkmark and the Content -->
                    <BulletDecorator Background="Transparent"
                                     HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                     VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                        <BulletDecorator.Bullet>
                            <Grid Width="13" Height="13">
                                <Ellipse x:Name="Ellipse_Border" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1" />
                                <Ellipse Margin="4" x:Name="CheckMark" Fill="{TemplateBinding Foreground}" />
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          RecognizesAccessKey="True" />
                    </BulletDecorator>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="CheckMark" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- <Style x:Key="SimpleRepeatButton" TargetType="{x:Type RepeatButton}" BasedOn="{x:Null}"> -->
    <!-- <Style x:Key="SimpleThumbStyle" TargetType="{x:Type Thumb}" BasedOn="{x:Null}"> -->
    <!-- <Style x:Key="SimpleScrollRepeatButtonStyle" TargetType="{x:Type RepeatButton}"> -->
    <!-- <Style x:Key="SimpleScrollBar" TargetType="{x:Type ScrollBar}"> -->
    <!-- <Style x:Key="SimpleScrollViewer" TargetType="{x:Type ScrollViewer}" BasedOn="{x:Null}"> -->
    <!-- <Style x:Key="SimpleListBox" TargetType="{x:Type ListBox}"> -->
    <!-- <Style x:Key="SimpleListBoxItem" TargetType="{x:Type ListBoxItem}"> -->
    <!-- <Style x:Key="SimpleExpander" TargetType="{x:Type Expander}"> -->

    <Style x:Key="MonochromeComboBoxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="6 2" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=(effects:ChromeEffect.Monochrome), Converter={x:Static common:ColorHslBrush.Instance}}" />
        <Setter Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Background}" />
        <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Background, Converter={x:Static common:ColorHslBrush.Instance}, ConverterParameter=+75%}" />
<!--        <Setter Property="TextBlock.Foreground" Value="{Binding RelativeSource={RelativeSource Self}, Path=Foreground}" />-->
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Grid SnapsToDevicePixels="True">
                        <Border x:Name="Border" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" />
                        <ContentPresenter x:Name="Presenter" Margin="{TemplateBinding Padding}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Background, Converter={x:Static common:ColorHslBrush.Instance}, ConverterParameter=+50%}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=(effects:ChromeEffect.Monochrome), Converter={x:Static common:ColorHslBrush.Instance}, ConverterParameter=+25%}" />
                            <Setter TargetName="Border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Self}, Path=Background, Converter={x:Static common:ColorHslBrush.Instance}, ConverterParameter=+40%}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource AncestorType=ComboBox}, Path=(effects:ChromeEffect.Monochrome), Converter={x:Static common:ColorHslBrush.Instance}, ConverterParameter=+25%/+75%}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--<Style TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource MonochromeComboBoxItemStyle}"/>-->

    <Style x:Key="MonochromeComboBoxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="4 2"/>
        <Setter Property="effects:ChromeEffect.Monochrome" Value="#FFF5FAFF"/>
        <Setter Property="effects:ChromeEffect.ChromeMatrix" Value="+0%,+70%,+70%,50, +0%,+70%,+70%,100, +25%,+25%/+75%,+25%/+75%,100"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource MonochromeComboBoxItemStyle}"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <!--<Setter Property="effects:FocusVisualEffect.AlwaysShowFocus" Value="True"/>
        <Setter Property="effects:FocusVisualEffect.FocusControlStyle" Value="{StaticResource OuterFocusVisualStyle}"/>-->
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ContentControl x:Name="ChromeMatrixProxy" Margin="0" Padding="0" BorderThickness="0"
                                    VerticalAlignment="Stretch" HorizontalAlignment="Stretch"
                                    effects:ChromeEffect.ChromeMatrix="{TemplateBinding effects:ChromeEffect.ChromeMatrix}">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                            </Grid.ColumnDefinitions>

                            <!-- The ToggleButton is databound to the ComboBox itself to toggle IsDropDownOpen -->
                            <ToggleButton x:Name="ToggleButton" Grid.Column="0" Grid.ColumnSpan="2" HorizontalContentAlignment="Right"
                                          Style="{StaticResource MonochromeDropDownButtonStyle}"
                                          Focusable="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                          BorderThickness="{TemplateBinding BorderThickness}"
                                          effects:ChromeEffect.Monochrome="{TemplateBinding effects:ChromeEffect.Monochrome}"
                                          effects:ChromeEffect.ChromeMatrix="{Binding ElementName=ChromeMatrixProxy, Path=(effects:ChromeEffect.ChromeMatrix)}"
                                          IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          ClickMode="Press" />
                            <ContentPresenter x:Name="ContentSite" Grid.Column="0"
                                              Margin="{TemplateBinding Padding}"
                                              Content="{TemplateBinding SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" 
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              IsHitTestVisible="False"
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>

                            <!-- The TextBox must be named PART_EditableTextBox or ComboBox will not recognize it -->
                            <!-- <TextBox x:Name="PART_EditableTextBox" Margin="3,3,23,3" Visibility="Hidden" HorizontalAlignment="Left"
                                 Template="{DynamicResource ComboBoxTextBox}"
                                 Style="{x:Null}" VerticalAlignment="Center" Focusable="True" Background="Transparent"
                                 IsReadOnly="{TemplateBinding IsReadOnly}" />-->

                            <!-- The Popup shows the list of items in the ComboBox. IsOpen is databound to IsDropDownOpen which is toggled via the ComboBoxToggleButton -->
                            <Popup x:Name="Popup" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom"
                                   Focusable="False" AllowsTransparency="True" PopupAnimation="Slide" VerticalOffset="0">
                                <Grid x:Name="DropDown" MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                      MinWidth="{TemplateBinding ActualWidth}" SnapsToDevicePixels="True">
                                    <Border x:Name="DropDownBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1"
                                            Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(effects:ChromeEffect.Monochrome), Converter={x:Static common:ColorHslBrush.Instance}}"/>
                                    <ScrollViewer Margin="2" Style="{DynamicResource SimpleScrollViewer}"
                                                  SnapsToDevicePixels="True" HorizontalScrollBarVisibility="Auto"
                                                  VerticalScrollBarVisibility="Auto" CanContentScroll="True">

                                        <ItemsPresenter Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </ScrollViewer>
                                </Grid>
                            </Popup>
                        </Grid>
                    </ContentControl>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter TargetName="DropDownBorder" Property="FrameworkElement.Height" Value="50"/>
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="ChromeMatrixProxy" Property="effects:ChromeEffect.ChromeMatrix" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(effects:ChromeEffect.ChromeMatrix), Converter={x:Static common:ComboBoxChromeMatrixForPopupConverter.Instance}}"/>
                        </Trigger>
                        <!-- Not ready! <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false" />
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_EditableTextBox" />
                            <Setter Property="Visibility" Value="Hidden" TargetName="ContentSite" />
                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- <Style x:Key="SimpleProgressBar" TargetType="{x:Type ProgressBar}"> -->
    <!-- <Style x:Key="SimpleTextBox" TargetType="{x:Type TextBox}"> -->
    <!-- <Style x:Key="SimpleLabel" TargetType="{x:Type Label}"> -->
    <!-- <Style x:Key="SimpleMenu" TargetType="{x:Type Menu}"> -->
    <!-- <Style x:Key="SimpleMenuItem" TargetType="{x:Type MenuItem}"> -->
    <!-- <Style x:Key="SimpleSeparator" TargetType="{x:Type Separator}"> -->
    <!-- <Style x:Key="SimpleTabControl" TargetType="{x:Type TabControl}"> -->
    <!-- <Style x:Key="SimpleTabItem" TargetType="{x:Type TabItem}"> -->
    <!-- <Style x:Key="SimpleSliderThumb" TargetType="{x:Type Thumb}"> -->
    <!-- <Style x:Key="SimpleSlider" TargetType="{x:Type Slider}"> -->
    <!-- <Style x:Key="SimpleTreeView" TargetType="{x:Type TreeView}"> -->
    <!-- <Style x:Key="SimpleTreeViewItemToggleButton" TargetType="{x:Type ToggleButton}"> -->
    <!-- <Style x:Key="SimpleTreeViewItem" TargetType="{x:Type TreeViewItem}"> -->

</ResourceDictionary>