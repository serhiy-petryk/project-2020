<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:common="clr-namespace:WpfSpLib.Common"
                    xmlns:helpers="clr-namespace:WpfSpLib.Helpers"
                    xmlns:system="clr-namespace:System;assembly=System.Runtime">

    <!-- Based on https://www.codeproject.com/Articles/248112/Templating-WPF-Expander-Control -->
    <Style x:Key="DefaultExpanderStyle" TargetType="{x:Type Expander}">
        <!--<Setter Property="Control.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="1"/>-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">

                    <ControlTemplate.Resources>
                        <ControlTemplate x:Key="HeaderSiteTemplate" TargetType="{x:Type ToggleButton}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Rectangle Fill="Transparent" Grid.ColumnSpan="2"/>
                                    <Ellipse Name="Circle" Grid.Column="0" Stroke="{TemplateBinding Foreground}" Width="20" Height="20" Opacity="0.7" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    <Path x:Name="Arrow" Grid.Column="0" Data="M 1,1.5 L 4.5,5 8,1.5" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Opacity="0.7"
                                          HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                        <Path.RenderTransform>
                                            <RotateTransform Angle="0"/>
                                        </Path.RenderTransform>
                                    </Path>
                                    <ContentPresenter x:Name="HeaderContent" Grid.Column="1" Margin="4,0,0,0" ContentSource="Content"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <!-- Animate arrow when toggled-->
                                <Trigger Property="IsChecked" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="180" Duration="0:0:0.4"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="Arrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="0" Duration="0:0:0.4"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>

                                <!-- MouseOver, Pressed behaviours-->
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Opacity" Value="1" TargetName="Circle"/>
                                    <Setter Property="Opacity" Value="1" TargetName="Arrow"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="StrokeThickness" Value="1.5" TargetName="Circle"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ControlTemplate.Resources>

                    <Border BorderBrush="{TemplateBinding Control.BorderBrush}"
                            BorderThickness="{TemplateBinding Control.BorderThickness}"
                            Background="{TemplateBinding Control.Background}" CornerRadius="3" SnapsToDevicePixels="True">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite" 
                                          DockPanel.Dock="Top"
                                          Template="{StaticResource HeaderSiteTemplate}"
                                          Content="{TemplateBinding Header}"
                                          Margin="1" MinWidth="0" MinHeight="0"
                                          Foreground="{TemplateBinding Foreground}" Padding="{TemplateBinding Padding}"
                                          FontFamily="{TemplateBinding FontFamily}" FontSize="{TemplateBinding FontSize}"
                                          FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                          IsChecked="{Binding Path=IsExpanded, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                                          OverridesDefaultStyle="True"/>
                            <Grid x:Name="ExpandSite">
                                <Grid.Height>
                                    <MultiBinding Converter="{x:Static common:MathConverter.Instance}" ConverterParameter="*">
                                        <Binding Path="DesiredSize.Height" ElementName="ExpanderContent"/>
                                        <Binding Path="Height" ElementName="HeightFactorProxy" />
                                    </MultiBinding>
                                </Grid.Height>
                                <FrameworkElement x:Name="HeightFactorProxy" Height="0" Visibility="Collapsed"/>
                                <ContentPresenter x:Name="ExpanderContent" DockPanel.Dock="Bottom" Focusable="False"
                                                  HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                                  Margin="{TemplateBinding Control.Padding}"/>
                            </Grid>
                        </DockPanel>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HeightFactorProxy" Storyboard.TargetProperty="Height" To="1" Duration="{x:Static helpers:AnimationHelper.AnimationDurationSlow}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HeightFactorProxy" Storyboard.TargetProperty="Height" To="0" Duration="{x:Static helpers:AnimationHelper.AnimationDurationSlow}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>